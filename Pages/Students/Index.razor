@page "/students"
@inject NavigationManager NavigationManager;
@inject Data.StudentService StudentService;
@inject IJSRuntime JsRuntime;

<h3>Students</h3>

<small>Add as many as you want.</small>
<div class="form-group">
    <a href="/Students/Add/" class="btn btn-success"><i class="oi oi-plus"></i> Add Student</a>
</div>
<br>

@if (_students == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else if (_students.Count == 0)
{
    <p>No Records Found.</p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Student Number</th>
            <th>First Name</th>
            <th>Last Name</th>
            <th>Actions</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var student in _students)
        {
            <tr>
                <td>
                    <a href="/Students/View/@student.StudentId">@student.Number</a>
                </td>
                <td>@student.FirstName</td>
                <td>@student.LastName</td>
                <td>
                    <button class="btn btn-danger"
                            @onclick="@(e => RemoveStudent(@student.StudentId))">
                        Remove
                    </button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    List<Data.Student> _students = new List<Data.Student>();

    protected override async Task OnInitializedAsync()
    {
        await RefreshStudents();
    }

    private async Task RefreshStudents()
    {
        _students = await StudentService.GetStudentsAsync();
    }

    private async Task RemoveStudent(int studentId)
    {
        var confirmation = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to remove this student?");

        if (confirmation)
        {
            await StudentService.RemoveStudentAsync(studentId);
            await RefreshStudents();
        }
    }

}